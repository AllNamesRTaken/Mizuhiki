// Generated by CoffeeScript 1.8.0
(function() {
  define(["clazzy/abstraction/Lang", "dojo/_base/lang", "dojo/_base/connect", "dojo/on", "dojo/aspect", "clazzy/Exception"], function(_classyLang, _lang, _connect, _on, _aspect, Exception) {
    'use strict';
    var Lang;
    return Lang = {
      clone: function(obj) {
        return _lang.clone(obj);
      },
      event: {
        on: function(obj, event, context, method, dontFix) {
          return _on(obj, event, Lang.hitch(context, typeof method === "string" ? context[method] : method), dontFix);
        },
        remove: function(handle) {
          return handle.remove();
        },
        emit: function(target, type, eventProperties) {
          if (eventProperties == null) {
            eventProperties = {
              bubbles: true,
              cancelable: true
            };
          }
          return _on.emit(target, type, eventProperties);
        }
      },
      aspect: {
        after: function(target, methodName, context, advice, receiveArguments) {
          if (receiveArguments == null) {
            receiveArguments = true;
          }
          return _aspect.after(target, methodName, Lang.hitch(context, typeof advice === "string" ? context[advice] : advice), receiveArguments);
        },
        before: function(target, methodName, context, advice) {
          return _aspect.before(target, methodName, Lang.hitch(context, typeof advice === "string" ? context[advice] : advice));
        },
        around: function(target, methodName, context, adviceFactory) {
          return _aspect.around(target, methodName, Lang.hitch(context, typeof adviceFactory === "string" ? context[advice] : adviceFactory));
        },
        remove: function(handle) {
          return handle.remove();
        }
      },
      hitch: function(that, func) {
        return _classyLang.hitch.apply(this, arguments);
      },
      trim: function(str) {
        if (String.prototype.trim) {
          return str.trim();
        } else {
          return str.replace(/^\s+|\s+$/g, "");
        }
      },
      indexOf: _classyLang.indexOf,
      map: _classyLang.map
    };
  });

}).call(this);

//# sourceMappingURL=Lang.js.map
