// Generated by CoffeeScript 1.8.0
(function() {
  define(["dojo/_base/window", "dojo/_base/html", "dojo/dom-geometry", "dojo/query!css3", "dojo/dom-construct", "dojo/parser", "dijit/registry", "clazzy/Exception", "dojo/mouse", "dojo/NodeList-traverse"], function(_win, _html, _domGeom, _query, _domConstruct, _parser, _registry, Exception, _mouse) {
    'use strict';
    var Dom, registry;
    if (!window.U4) {
      window.U4 = {};
    }
    if (!window.U4.__registry) {
      window.U4.__registry = {};
    }
    registry = window.U4.__registry;
    return Dom = {
      byId: function(domOrId) {
        return _html.byId(domOrId);
      },
      destroy: function(node) {
        return _domConstruct.destroy(node);
      },
      create: function(html) {
        var dom;
        dom = document.createElement('div');
        dom.innerHTML = html;
        return dom.childNodes[0];
      },
      find: function(query, root) {
        return _query(query, root);
      },
      findAllWidgets: function(rootId) {
        var root;
        if (rootId) {
          root = (rootId != null ? rootId.nodeType : void 0) === 1 ? rootId : this.byId(rootId);
          if (root) {
            return _registry.findWidgets(root);
          } else {
            return [];
          }
        }
      },
      mouse: {
        enter: _mouse.enter,
        isLeft: _mouse.isLeft,
        isMiddle: _mouse.isMiddle,
        isRight: _mouse.isRight,
        leave: _mouse.leave
      },
      place: function(node, domOrId, position) {
        var el;
        el = this.byId(domOrId);
        switch (position) {
          case "before":
            return _domConstruct.place(node, el, "before");
          case "after":
            return _domConstruct.place(node, el, "after");
          case "first":
            return _domConstruct.place(node, el, "first");
          case "last":
            return _domConstruct.place(node, el, "last");
          case "only":
            return _domConstruct.place(node, el, "only");
          case "replace":
            return this.replace(el, node);
          default:
            return _domConstruct.place(node, el, "last");
        }
      },
      parse: function(node, args) {
        return _parser.parse(node, args);
      },
      replace: function(source, target) {
        return _domConstruct.place(target, source, "replace");
      },
      register: function(id, obj) {
        if (registry[id]) {
          throw new Exception("DuplicateRegistryIdException", "The object registry already has something registerd for id " + id);
        }
        return registry[id] = obj;
      },
      unregister: function(id) {
        return delete registry[id];
      },
      unregisterWidget: function(widgetId) {
        return _registry.remove(widgetId);
      }
    };
  });

}).call(this);

//# sourceMappingURL=Dom.js.map
