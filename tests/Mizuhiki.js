// Generated by CoffeeScript 1.8.0
(function() {
  define(["dojo/main", "util/doh/main", "clazzy/Clazzy", "dojo/cache", "dojo/_base/url", "mizuhiki/abstraction/Lang", "mizuhiki/abstraction/Dom", "mizuhiki/Mizuhiki", "clazzy/Exception", "mizuhiki/TemplatedObject", "mizuhiki/SoyaMilk"], function(dojo, doh, Class, cache, _url, lang, dom, Mizuhiki, Exception, TemplatedObject, soyamilk) {
    var DummyClass, TemplatedDummyClass, renderer;
    renderer = new Mizuhiki();
    DummyClass = Class("namespace.Dummy", null, [null]);
    TemplatedDummyClass = Class("namespace.TemplatedDummy", TemplatedObject, null, {
      constructor: function() {
        this.AttachPoint = document.body;
        return this;
      }
    });
    return doh.register("mizuhiki.tests.Mizuhiki", [
      {
        name: "render_control_callsDraw",
        setUp: function() {
          renderer._drawCalled = false;
          this.original_draw = renderer._draw;
          return renderer._draw = function(control, id, index, data) {
            return this._drawCalled = true;
          };
        },
        runTest: function(t) {
          renderer.render("dummy");
          return doh.assertTrue(renderer._drawCalled);
        },
        tearDown: function() {
          return renderer._draw = this.original_draw;
        }
      }, {
        name: "draw_nonTemplatedObject_throws",
        setUp: function() {},
        runTest: function(t) {
          var obj;
          obj = new DummyClass();
          return doh.assertError(Exception, renderer, "_draw", [obj]);
        },
        tearDown: function() {}
      }, {
        name: "_draw_control_allPartsCalled",
        setUp: function() {
          renderer._unbindDataCalled = false;
          this.original_unbindData = renderer._unbindData;
          renderer._unbindData = function(control, nodeId) {
            control._dataBindings = {
              parsed: false
            };
            return this._unbindDataCalled = "_unbindDataCalled";
          };
          renderer._removeWidgetsCalled = false;
          this.original_removeWidgets = renderer._removeWidgets;
          renderer._removeWidgets = function(control, nodeId) {
            return this._removeWidgetsCalled = "_removeWidgetsCalled";
          };
          renderer._unregisterNodeCalled = false;
          this.original_unregisterNode = renderer._unregisterNode;
          renderer._unregisterNode = function(control) {
            return this._unregisterNodeCalled = "_unregisterNodeCalled";
          };
          renderer._calculateBindingsCalled = false;
          this.original_calculateBindings = renderer._calculateBindings;
          renderer._calculateBindings = function(control) {
            return this._calculateBindingsCalled = "_calculateBindingsCalled";
          };
          renderer._parseTemplateCalled = false;
          this.original_parseTemplate = renderer._parseTemplate;
          renderer._parseTemplate = function(control, id, index, data) {
            return this._parseTemplateCalled = "_parseTemplateCalled";
          };
          renderer.__frameworkReplaceCustomAttributesCalled = false;
          this.original__frameworkReplaceCustomAttributes = renderer.__frameworkReplaceCustomAttributes;
          renderer.__frameworkReplaceCustomAttributes = function(html) {
            return this.__frameworkReplaceCustomAttributesCalled = "__frameworkReplaceCustomAttributesCalled";
          };
          renderer._placeHtmlCalled = false;
          this.original_placeHtml = renderer._placeHtml;
          renderer._placeHtml = function(control, html, nodeId) {
            return this._placeHtmlCalled = "_placeHtmlCalled";
          };
          renderer._registerNodeCalled = false;
          this.original_registerNode = renderer._registerNode;
          renderer._registerNode = function(control) {
            return this._registerNodeCalled = "_registerNodeCalled";
          };
          renderer.__frameworkParseCalled = false;
          this.original__frameworkParse = renderer.__frameworkParse;
          renderer.__frameworkParse = function(dom) {
            return this.__frameworkParseCalled = "__frameworkParseCalled";
          };
          renderer._runGeneratorsCalled = false;
          this.original_runGenerators = renderer._runGenerators;
          renderer._runGenerators = function(dom) {
            return this._runGeneratorsCalled = "_runGeneratorsCalled";
          };
          renderer._bindDataCalled = false;
          this.original_bindData = renderer._bindData;
          renderer._bindData = function(control, nodeId, dom) {
            return this._bindDataCalled = "_bindDataCalled";
          };
          renderer._cleanDomCalled = false;
          this.original_cleanDom = renderer._cleanDom;
          return renderer._cleanDom = function(dom) {
            return this._cleanDomCalled = "_cleanDomCalled";
          };
        },
        runTest: function(t) {
          var dummyControl;
          dummyControl = new TemplatedDummyClass();
          renderer._draw(dummyControl);
          doh.assertEqual("_unbindDataCalled", renderer._unbindDataCalled);
          doh.assertEqual("_removeWidgetsCalled", renderer._removeWidgetsCalled);
          doh.assertEqual("_unregisterNodeCalled", renderer._unregisterNodeCalled);
          doh.assertEqual("_calculateBindingsCalled", renderer._calculateBindingsCalled);
          doh.assertEqual("_parseTemplateCalled", renderer._parseTemplateCalled);
          doh.assertEqual("__frameworkReplaceCustomAttributesCalled", renderer.__frameworkReplaceCustomAttributesCalled);
          doh.assertEqual("_placeHtmlCalled", renderer._placeHtmlCalled);
          doh.assertEqual("_registerNodeCalled", renderer._registerNodeCalled);
          doh.assertEqual("__frameworkParseCalled", renderer.__frameworkParseCalled);
          doh.assertEqual("_runGeneratorsCalled", renderer._runGeneratorsCalled);
          doh.assertEqual("_bindDataCalled", renderer._bindDataCalled);
          return doh.assertEqual("_cleanDomCalled", renderer._cleanDomCalled);
        },
        tearDown: function() {
          renderer._unbindData = this.original_unbindData;
          renderer._removeWidgets = this.original_removeWidgets;
          renderer._unregisterNode = this.original_unregisterNode;
          renderer._calculateBindings = this.original_calculateBindings;
          renderer._parseTemplate = this.original_parseTemplate;
          renderer.__frameworkReplaceCustomAttributes = this.original__frameworkReplaceCustomAttributes;
          renderer._placeHtml = this.original_placeHtml;
          renderer._registerNode = this.original_registerNode;
          renderer.__frameworkParse = this.original__frameworkParse;
          renderer._runGenerators = this.original_runGenerators;
          renderer._bindData = this.original_bindData;
          return renderer._cleanDom = this.original_cleanDom;
        }
      }, {
        name: "generateGuid_null_generates32CharGuid",
        setUp: function() {},
        runTest: function(t) {
          var guid;
          guid = renderer.generateGuid();
          return doh.assertTrue(guid.length === 32);
        },
        tearDown: function() {}
      }, {
        name: "generateGuid_null_generatesDifferent",
        setUp: function() {},
        runTest: function(t) {
          var guid1, guid2;
          guid1 = renderer.generateGuid();
          guid2 = renderer.generateGuid();
          return doh.assertNotEqual(guid1, guid2);
        },
        tearDown: function() {}
      }, {
        name: "_unbindData_control_unbindsEvents",
        setUp: function() {
          this.control = new TemplatedDummyClass();
          this.control._setterBindings._domHandle = "domhandle";
          this.control._attachPoints = {
            "id1": "attachPoint1",
            "id2": "attachPoint2"
          };
          this.control._attachEvents = {
            "id1": ["handle1", "handle2"],
            "id2": ["handle3", "handle4"]
          };
          this.control.PreviousId = "someid";
          this.control._attachIds["someid"] = {
            "id1": true,
            "id2": true
          };
          this.target = ["setterhandle", "domhandle", "handle1", "handle2", "handle3", "handle4"];
          this.originalById = dom.byId;
          return dom.byId = function(id) {
            return document.createElement("div");
          };
        },
        runTest: function(t) {
          var disconnected;
          disconnected = [];
          this.originalEventRemove = lang.event.remove;
          lang.event.remove = function(handle) {
            return disconnected.push(handle);
          };
          this.control._setterBindings._setterHandle = {
            remove: function() {
              return disconnected.push("setterhandle");
            }
          };
          renderer._unbindData(this.control);
          return doh.assertEqual(this.target, disconnected);
        },
        tearDown: function() {
          dom.byId = this.originalById;
          return lang.event.remove = this.originalEventRemove;
        }
      }, {
        name: "_removeWidgets_control_unregisterAndDestroyWidget",
        setUp: function() {
          this.control = new TemplatedDummyClass();
          return this.control.PreviousId = "someid";
        },
        runTest: function(t) {
          var destroyed, unregistered;
          destroyed = [];
          unregistered = false;
          this.originalFindAllWidgets = dom.findAllWidgets;
          dom.findAllWidgets = function(id) {
            return [
              {
                destroyRecursive: function() {
                  return destroyed.push(1);
                }
              }, {
                destroyRecursive: function() {
                  return destroyed.push(2);
                }
              }
            ];
          };
          this.originalUnregisterWidget = dom.unregisterWidget;
          dom.unregisterWidget = function(id) {
            return unregistered = true;
          };
          renderer._removeWidgets(this.control);
          doh.assertEqual([1, 2], destroyed);
          return doh.assertTrue(unregistered);
        },
        tearDown: function() {
          dom.findAllWidgets = this.originalFindAllWidgets;
          return dom.unregisterWidget = this.originalUnregisterWidget;
        }
      }, {
        name: "_removeWidgets_control_unregisteredAndDestroyed",
        setUp: function() {
          this.control = new TemplatedDummyClass();
          return this.control.PreviousId = "someid";
        },
        runTest: function(t) {
          var unregistered;
          unregistered = false;
          this.originalUnregister = dom.unregister;
          dom.unregister = function(id) {
            return unregistered = true;
          };
          renderer._unregisterNode(this.control);
          return doh.assertTrue(unregistered);
        },
        tearDown: function() {
          return dom.unregister = this.originalUnregister;
        }
      }, {
        name: "_calculateBindings_control_correctDataBindingsAndSetterBindings",
        setUp: function() {
          var url;
          this.originalRender = soyamilk.render;
          soyamilk.render = function(itemId, control, partials) {
            return itemId.replace(/{{Id}}/g, "someid");
          };
          url = "../../mizuhiki/tests/resources/DummyTemplate.html";
          this.control = new TemplatedDummyClass();
          this.control.Id = "someid";
          this.control.templateString = cache(new _url(url));
          this.expectedDataBindings = {
            "someid_input": {
              "html": "<input type=\"text\" value=\"{{Text}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}_input\" data-bind-to=\"Text\">",
              "prop": ["Text"],
              "key": null
            },
            "someid_LastUpdated": {
              "html": "<span id=\"{{Id}}_LastUpdated\" data-bind-to=\"Text\">{{Text}}</span>",
              "prop": ["Text"],
              "key": null
            },
            "someidarrText{{_}}": {
              "html": "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText{{_}}\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"{{_}}\">",
              "prop": ["DataArray"],
              "key": "data"
            },
            "someidarrSpan{{_}}": {
              "html": "<span id=\"{{Id}}arrSpan{{_}}\" data-bind-to=\"DataArray\" data-index=\"{{_}}\">{{data}}</span>",
              "prop": ["DataArray"],
              "key": null
            },
            "parsed": true
          };
          return this.expectedSetterBindings = {
            "Text": ["someid_input", "someid_LastUpdated"],
            "DataArray": ["someidarrText{{_}}", "someidarrSpan{{_}}"]
          };
        },
        runTest: function(t) {
          var exp_input, input;
          renderer._calculateBindings(this.control);
          doh.assertEqual(this.expectedDataBindings.someid_LastUpdated, this.control._dataBindings.someid_LastUpdated);
          exp_input = dom.create(this.expectedDataBindings.someid_input.html);
          input = dom.create(this.control._dataBindings.someid_input.html);
          doh.assertEqual(exp_input.getAttribute("type"), input.getAttribute("type"));
          doh.assertEqual(exp_input.getAttribute("value"), input.getAttribute("value"));
          doh.assertEqual(exp_input.getAttribute("data-dojo-type"), input.getAttribute("data-dojo-type"));
          doh.assertEqual(exp_input.getAttribute("data-dojo-props"), input.getAttribute("data-dojo-props"));
          doh.assertEqual(exp_input.getAttribute("id"), input.getAttribute("id"));
          doh.assertEqual(exp_input.getAttribute("data-bind-to"), input.getAttribute("data-bind-to"));
          doh.assertEqual(exp_input.innerHTML, input.innerHTML);
          doh.assertEqual(this.expectedDataBindings.someid_input.prop, this.control._dataBindings.someid_input.prop);
          doh.assertEqual(this.expectedDataBindings["someidarrSpan{{_}}"], this.control._dataBindings["someidarrSpan{{_}}"]);
          exp_input = dom.create(this.expectedDataBindings["someidarrText{{_}}"].html);
          input = dom.create(this.control._dataBindings["someidarrText{{_}}"].html);
          doh.assertEqual(exp_input.getAttribute("type"), input.getAttribute("type"));
          doh.assertEqual(exp_input.getAttribute("value"), input.getAttribute("value"));
          doh.assertEqual(exp_input.getAttribute("data-dojo-type"), input.getAttribute("data-dojo-type"));
          doh.assertEqual(exp_input.getAttribute("data-dojo-props"), input.getAttribute("data-dojo-props"));
          doh.assertEqual(exp_input.getAttribute("id"), input.getAttribute("id"));
          doh.assertEqual(exp_input.getAttribute("data-bind-to"), input.getAttribute("data-bind-to"));
          doh.assertEqual(exp_input.innerHTML, input.innerHTML);
          doh.assertEqual(this.expectedDataBindings.someid_input.prop, this.control._dataBindings.someid_input.prop);
          return doh.assertEqual(this.expectedSetterBindings, this.control._setterBindings);
        },
        tearDown: function() {
          return soyamilk.render = this.originalRender;
        }
      }, {
        name: "_parseTemplate_control_soyaMilkRenderCalled",
        setUp: function() {
          return this.control = new TemplatedDummyClass();
        },
        runTest: function(t) {
          var soyamilkcalled;
          soyamilkcalled = false;
          this.originalRender = soyamilk.render;
          soyamilk.render = function(template, data, partials) {
            soyamilkcalled = true;
            return "dummyString";
          };
          renderer._parseTemplate(this.control);
          return doh.assertTrue(soyamilkcalled);
        },
        tearDown: function() {
          return soyamilk.render = this.originalRender;
        }
      }, {
        name: "_parseTemplate_IdIndexData_soyaMilkRenderCalled",
        setUp: function() {
          this.control = new TemplatedDummyClass();
          this.control.Id = "someid";
          this.id = this.control.Id + "arrText{{_}}";
          this.index = 1;
          this.data = {
            DataArray: "sometext"
          };
          this.control._dataBindings = {
            "someid_input": {
              "html": "<input type=\"text\" value=\"{{Text}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}_input\" data-bind-to=\"Text\">",
              "prop": ["Text"],
              "key": null
            },
            "someid_LastUpdated": {
              "html": "<span id=\"{{Id}}_LastUpdated\" data-bind-to=\"Text\">{{Text}}</span>",
              "prop": ["Text"],
              "key": null
            },
            "someidarrText{{_}}": {
              "html": "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText{{_}}\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"{{_}}\">",
              "prop": ["DataArray"],
              "key": "data"
            },
            "someidarrSpan{{_}}": {
              "html": "<span id=\"{{Id}}arrSpan{{_}}\" data-bind-to=\"DataArray\" data-index=\"{{_}}\">{{data}}</span>",
              "prop": ["DataArray"],
              "key": null
            },
            "parsed": true
          };
          this.control._setterBindings = {
            "Text": ["someid_input", "someid_LastUpdated"],
            "DataArray": ["someidarrText{{_}}", "someidarrSpan{{_}}"]
          };
          return this.expectedTemplateString = "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText1\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"1\">";
        },
        runTest: function(t) {
          var templateString;
          templateString = "";
          this.originalRender = soyamilk.render;
          soyamilk.render = function(template, data, partials) {
            return templateString = template;
          };
          renderer._parseTemplate(this.control, this.id, this.index, this.data);
          return doh.assertEqual(this.expectedTemplateString, templateString);
        },
        tearDown: function() {
          return soyamilk.render = this.originalRender;
        }
      }, {
        name: "__frameworkReplaceCustomAttributes_string_dojoAttributesReplaced",
        setUp: function() {
          this.text = "blabla data-dojo-attach blabla";
          return this.targetText = "blabla data-attach blabla";
        },
        runTest: function(t) {
          var text;
          text = renderer.__frameworkReplaceCustomAttributes(this.text);
          return doh.assertEqual(this.targetText, text);
        },
        tearDown: function() {}
      }, {
        name: "__frameworkParse_dom_parseCalled",
        setUp: function() {
          return this.dom = document.createElement("div");
        },
        runTest: function(t) {
          var parseCalled;
          parseCalled = false;
          this.originalParse = dom.parse;
          dom.parse = function(dom) {
            return parseCalled = true;
          };
          renderer.__frameworkParse(this.dom);
          return doh.assertTrue(parseCalled);
        },
        tearDown: function() {
          return dom.parse = this.originalParse;
        }
      }, {
        name: "_runGenerators_controlAndNode_domReplacedWithResultFromGenerator",
        setUp: function() {
          this.node = document.createElement("div");
          this.node.innerHTML = '<div></div><span data-generator-function="makeit"></span><div></div>';
          this.control = {
            makeit: function() {
              var el;
              el = document.createElement("span");
              el.innerHTML = "madeit";
              return el;
            }
          };
          return this.expected = '<div></div><span>madeit</span><div></div>';
        },
        runTest: function(t) {
          renderer._runGenerators(this.control, this.node);
          return doh.assertEqual(this.expected, this.node.innerHTML);
        },
        tearDown: function() {}
      }, {
        name: "__frameworkParse_domWithAttribute_parseCalledWithParent",
        setUp: function() {
          this.parent = document.createElement("div");
          this.node = document.createElement("div");
          this.node.setAttribute("data-dojo-type", "somevalue");
          return this.parent.appendChild(this.node);
        },
        runTest: function(t) {
          var parent, parseCalled;
          parseCalled = false;
          this.originalParse = dom.parse;
          parent = this.parent;
          dom.parse = function(node) {
            return parseCalled = node === parent;
          };
          renderer.__frameworkParse(this.node);
          return doh.assertTrue(parseCalled);
        },
        tearDown: function() {
          return dom.parse = this.originalParse;
        }
      }, {
        name: "_placeHtml_controlHtmlId_htmlReplaced",
        setUp: function() {
          this.control = new DummyClass();
          this.control.PreviousId = "previd";
          this.control.AttachPoint = "someAttachPoint";
          this.control.PreviousAttachPoint = "someAttachPoint";
          this.templateHtml = "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText1\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"1\">";
          return this.id = "someid";
        },
        runTest: function(t) {
          var createdElement, placedHow, placedId, placedNode;
          createdElement = document.createElement("div");
          this.originalCreate = dom.create;
          dom.create = function(html) {
            return createdElement;
          };
          this.originalById = dom.byId;
          dom.byId = function(id) {
            return "someAttachPoint";
          };
          placedNode = null;
          placedId = null;
          placedHow = null;
          this.originalPlace = dom.place;
          dom.place = function(node, domOrId, position) {
            placedNode = node;
            placedId = domOrId;
            return placedHow = position;
          };
          renderer._placeHtml(this.control, this.templateHtml, this.id);
          doh.assertEqual(createdElement, placedNode);
          doh.assertEqual("widget_someid", placedId);
          return doh.assertEqual("replace", placedHow);
        },
        tearDown: function() {
          dom.create = this.originalCreate;
          dom.byId = this.originalById;
          return dom.place = this.originalPlace;
        }
      }, {
        name: "_placeHtml_controlHtml_htmlReplaced",
        setUp: function() {
          this.control = new DummyClass();
          this.control.PreviousId = "previd";
          this.control.AttachPoint = "someAttachPoint";
          this.control.PreviousAttachPoint = "someAttachPoint";
          return this.templateHtml = "dummyTemplateString";
        },
        runTest: function(t) {
          var createdElement, placedHow, placedId, placedNode;
          createdElement = document.createElement("div");
          this.originalCreate = dom.create;
          dom.create = function(html) {
            return createdElement;
          };
          this.originalById = dom.byId;
          dom.byId = function(id) {
            return "someAttachPoint";
          };
          placedNode = null;
          placedId = null;
          placedHow = null;
          this.originalPlace = dom.place;
          dom.place = function(node, domOrId, position) {
            placedNode = node;
            placedId = domOrId;
            return placedHow = position;
          };
          renderer._placeHtml(this.control, this.templateHtml);
          doh.assertEqual(createdElement, placedNode);
          doh.assertEqual(this.control.PreviousId, placedId);
          return doh.assertEqual("replace", placedHow);
        },
        tearDown: function() {
          dom.create = this.originalCreate;
          dom.byId = this.originalById;
          return dom.place = this.originalPlace;
        }
      }, {
        name: "_placeHtml_controlHtmlNoPreviousId_htmlPlacedAtAttachPoint",
        setUp: function() {
          this.control = new DummyClass();
          this.control.AttachPoint = "someAttachPoint";
          return this.templateHtml = "dummyTemplateString";
        },
        runTest: function(t) {
          var createdElement, placedHow, placedId, placedNode;
          createdElement = document.createElement("div");
          this.originalCreate = dom.create;
          dom.create = function(html) {
            return createdElement;
          };
          this.originalById = dom.byId;
          dom.byId = function(id) {
            if (id === "someAttachPoint") {
              return "someAttachPoint";
            } else {
              return true;
            }
          };
          placedNode = null;
          placedId = null;
          placedHow = null;
          this.originalPlace = dom.place;
          dom.place = function(node, domOrId, position) {
            placedNode = node;
            placedId = domOrId;
            return placedHow = position;
          };
          renderer._placeHtml(this.control, this.templateHtml);
          doh.assertEqual(createdElement, placedNode);
          doh.assertEqual(this.control.AttachPoint, placedId);
          return doh.assertEqual(void 0, placedHow);
        },
        tearDown: function() {
          dom.create = this.originalCreate;
          dom.byId = this.originalById;
          return dom.place = this.originalPlace;
        }
      }, {
        name: "_placeHtml_controlHtmlNoAttachPoint_nodeCreatedAndDomRemoved",
        setUp: function() {
          this.control = new DummyClass();
          this.control.AttachPoint = null;
          this.control.PreviousAttachPoint = "someAttachPoint";
          return this.templateHtml = "dummyTemplateString";
        },
        runTest: function(t) {
          var createdElement, domDestroyed, placeCalled;
          createdElement = document.createElement("div");
          this.originalCreate = dom.create;
          dom.create = function(html) {
            return createdElement;
          };
          this.originalById = dom.byId;
          dom.byId = function(id) {
            return true;
          };
          domDestroyed = false;
          this.originalDestroy = dom.destroy;
          dom.destroy = function(id) {
            return domDestroyed = "domDestroyed";
          };
          placeCalled = false;
          this.originalPlace = dom.place;
          dom.place = function(node, domOrId, position) {
            return placeCalled = "placeCalled";
          };
          doh.assertEqual(void 0, this.control.domNode);
          renderer._placeHtml(this.control, this.templateHtml);
          doh.assertEqual(false, placeCalled);
          doh.assertEqual("domDestroyed", domDestroyed);
          return doh.assertTrue(this.control.domNode);
        },
        tearDown: function() {
          dom.create = this.originalCreate;
          dom.byId = this.originalById;
          dom.place = this.originalPlace;
          return dom.destroy = this.originalDestroy;
        }
      }, {
        name: "_registerNode_control_registerCalled",
        setUp: function() {
          return this.control = new DummyClass();
        },
        runTest: function(t) {
          var registerCalled;
          registerCalled = false;
          this.originalRegister = dom.register;
          dom.register = function(dom) {
            return registerCalled = true;
          };
          renderer._registerNode(this.control);
          return doh.assertTrue(registerCalled);
        },
        tearDown: function() {
          return dom.register = this.originalRegister;
        }
      }, {
        name: "_bindData_controlAndDom_dataOnchangeAndSetterBound",
        setUp: function() {
          var html;
          this.control = new DummyClass();
          this.control.DataArray = [
            {
              data: "text1"
            }, {
              data: "text2"
            }
          ];
          this.control.Id = "someid";
          this.control._dataBindings = {
            "someid_input": {
              "html": "<input type=\"text\" value=\"{{Text}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}_input\" data-bind-to=\"Text\">",
              "prop": ["Text"],
              "key": null
            },
            "someid_LastUpdated": {
              "html": "<span id=\"{{Id}}_LastUpdated\" data-bind-to=\"Text\">{{Text}}</span>",
              "prop": ["Text"],
              "key": null
            },
            "someidarrText{{_}}": {
              "html": "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText{{_}}\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"{{_}}\">",
              "prop": ["DataArray"],
              "key": "data"
            },
            "someidarrSpan{{_}}": {
              "html": "<span id=\"{{Id}}arrSpan{{_}}\" data-bind-to=\"DataArray\" data-index=\"{{_}}\">{{data}}</span>",
              "prop": ["DataArray"],
              "key": null
            },
            "parsed": true
          };
          this.control._setterBindings = {
            "Text": ["someid_input", "someid_LastUpdated"],
            "DataArray": ["someidarrText{{_}}", "someidarrSpan{{_}}"]
          };
          this.control._attachIds = {
            someid: {
              "id1": true,
              "id2": true
            }
          };
          html = "<div id=\"someid\" class=\"Text\" width: 100%; height: 100%\"> <input type=\"text\" value=\"sometext\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someid_input\" data-bind-to=\"Text\" /> <label for=\"someid_input\"> <span id=\"someid_LastUpdated\" data-bind-to=\"Text\">sometext</span> </label> <br /> <input type=\"text\" value=\"text1\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someidarrText0\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=0 /> <label for=\"someidarrText0\"> <span id=\"someidarrSpan0\" data-bind-to=\"DataArray\" data-index=0>text1</span> </label> <br /> <input type=\"text\" value=\"text2\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someidarrText1\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=1 /> <label for=\"someidarrText1\"> <span id=\"someidarrSpan1\" data-bind-to=\"DataArray\" data-index=1>text2</span> </label> <br /> </div>";
          return this.node = dom.create(html);
        },
        runTest: function(t) {
          var connectCalled, setCalled, _bindAttachPointsCalled, _bindEventsCalled;
          _bindEventsCalled = false;
          this.original_bindEvents = renderer._bindEvents;
          renderer._bindEvents = function(control, dom, nodeId) {
            return _bindEventsCalled = "_bindEventsCalled";
          };
          _bindAttachPointsCalled = false;
          this.original_bindAttachPoints = renderer._bindAttachPoints;
          renderer._bindAttachPoints = function(control, dom, nodeId) {
            return _bindAttachPointsCalled = "_bindAttachPointsCalled";
          };
          connectCalled = [];
          this.originalOn = lang.event.on;
          lang.event.on = function(obj, event, context, method, dontFix) {
            return connectCalled.push(event);
          };
          this.originalWatch = this.control.watch;
          this.control.watch = function(prop, callback) {
            return connectCalled.push("set");
          };
          setCalled = [];
          this.originalSet = this.control.set;
          this.control.set = function(prop, value, index, self) {
            return setCalled.push(prop);
          };
          renderer._bindData(this.control, this.id, this.node);
          doh.assertEqual("_bindEventsCalled", _bindEventsCalled);
          doh.assertEqual("_bindAttachPointsCalled", _bindAttachPointsCalled);
          return doh.assertEqual(["set", "change"], connectCalled);
        },
        tearDown: function() {
          renderer._bindEvents = this.original_bindEvents;
          renderer._bindAttachPoints = this.original_bindAttachPoints;
          lang.event.on = this.originalOn;
          return this.control.watch = this.originalWatch;
        }
      }, {
        name: "_bindData_controlAndDom_setCalls_draw",
        setUp: function() {
          var html;
          this.control = new DummyClass({
            Id: "someid",
            Text: 1
          });
          this.control.DataArray = [
            {
              data: "text1"
            }, {
              data: "text2"
            }
          ];
          this.control._dataBindings = {
            "someid_input": {
              "html": "<input type=\"text\" value=\"{{Text}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}_input\" data-bind-to=\"Text\">",
              "prop": ["Text"],
              "key": null
            },
            "someid_LastUpdated": {
              "html": "<span id=\"{{Id}}_LastUpdated\" data-bind-to=\"Text\">{{Text}}</span>",
              "prop": ["Text"],
              "key": null
            },
            "someidarrText{{_}}": {
              "html": "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText{{_}}\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"{{_}}\">",
              "prop": ["DataArray"],
              "key": "data"
            },
            "someidarrSpan{{_}}": {
              "html": "<span id=\"{{Id}}arrSpan{{_}}\" data-bind-to=\"DataArray\" data-index=\"{{_}}\">{{data}}</span>",
              "prop": ["DataArray"],
              "key": null
            },
            "parsed": true
          };
          this.control._setterBindings = {
            "Text": ["someid_input", "someid_LastUpdated"],
            "DataArray": ["someidarrText{{_}}", "someidarrSpan{{_}}"]
          };
          this.control._attachIds = {
            someid: {
              "id1": true,
              "id2": true
            }
          };
          html = "<div id=\"someid\" class=\"Text\" width: 100%; height: 100%\"> <input type=\"text\" value=\"sometext\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someid_input\" data-bind-to=\"Text\" /> <label for=\"someid_input\"> <span id=\"someid_LastUpdated\" data-bind-to=\"Text\">sometext</span> </label> <br /> <input type=\"text\" value=\"text1\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someidarrText0\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=0 /> <label for=\"someidarrText0\"> <span id=\"someidarrSpan0\" data-bind-to=\"DataArray\" data-index=0>text1</span> </label> <br /> <input type=\"text\" value=\"text2\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someidarrText1\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=1 /> <label for=\"someidarrText1\"> <span id=\"someidarrSpan1\" data-bind-to=\"DataArray\" data-index=1>text2</span> </label> <br /> </div>";
          return this.node = dom.create(html);
        },
        runTest: function(t) {
          var drawCalled;
          this.original_bindEvents = renderer._bindEvents;
          renderer._bindEvents = function(control, dom, nodeId) {};
          this.originalOn = lang.event.on;
          lang.event.on = function(obj, event, context, method, dontFix) {};
          drawCalled = false;
          this.original_draw = renderer._draw;
          renderer._draw = function() {
            return drawCalled = "drawCalled";
          };
          renderer._bindData(this.control, this.id, this.node);
          this.control.set("Text", 2);
          return doh.assertEqual("drawCalled", drawCalled);
        },
        tearDown: function() {
          renderer._bindEvents = this.original_bindEvents;
          lang.event.on = this.originalOn;
          return renderer._draw = this.original_draw;
        }
      }, {
        name: "_bindData_controlAndDom_eventTriggersSet",
        setUp: function() {
          var html;
          this.control = new DummyClass({
            Id: "someid",
            Text: 1
          });
          this.control.DataArray = [
            {
              data: "text1"
            }, {
              data: "text2"
            }
          ];
          this.control._dataBindings = {
            "someid_input": {
              "html": "<input type=\"text\" value=\"{{Text}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}_input\" data-bind-to=\"Text\">",
              "prop": ["Text"],
              "key": null
            },
            "someid_LastUpdated": {
              "html": "<span id=\"{{Id}}_LastUpdated\" data-bind-to=\"Text\">{{Text}}</span>",
              "prop": ["Text"],
              "key": null
            },
            "someidarrText{{_}}": {
              "html": "<input type=\"text\" value=\"{{data}}\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"{{Id}}arrText{{_}}\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=\"{{_}}\">",
              "prop": ["DataArray"],
              "key": "data"
            },
            "someidarrSpan{{_}}": {
              "html": "<span id=\"{{Id}}arrSpan{{_}}\" data-bind-to=\"DataArray\" data-index=\"{{_}}\">{{data}}</span>",
              "prop": ["DataArray"],
              "key": null
            },
            "parsed": true
          };
          this.control._setterBindings = {
            "Text": ["someid_input", "someid_LastUpdated"],
            "DataArray": ["someidarrText{{_}}", "someidarrSpan{{_}}"]
          };
          this.control._attachIds = {
            someid: {
              "id1": true,
              "id2": true
            }
          };
          html = "<div id=\"someid\" class=\"Text\" width: 100%; height: 100%\"> <input type=\"text\" value=\"sometext\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someid_input\" data-bind-to=\"Text\" /> <label for=\"someid_input\"> <span id=\"someid_LastUpdated\" data-bind-to=\"Text\">sometext</span> </label> <br /> <input type=\"text\" value=\"text1\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someidarrText0\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=0 /> <label for=\"someidarrText0\"> <span id=\"someidarrSpan0\" data-bind-to=\"DataArray\" data-index=0>text1</span> </label> <br /> <input type=\"text\" value=\"text2\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someidarrText1\" data-bind-to=\"DataArray\" data-bind-to-key=\"data\" data-index=1 /> <label for=\"someidarrText1\"> <span id=\"someidarrSpan1\" data-bind-to=\"DataArray\" data-index=1>text2</span> </label> <br /> </div>";
          this.node = dom.create(html);
          return this.control.domNode = this.node;
        },
        runTest: function(t) {
          var setCalled;
          this.originalWatch = this.control.watch;
          this.control.watch = function(prop, callback) {};
          setCalled = false;
          this.originalSet = this.control.set;
          this.control.set = function(prop, value, index, self) {
            return setCalled = prop;
          };
          this.original_bindAttachPoints = renderer._bindAttachPoints;
          renderer._bindAttachPoints = function(control, dom, nodeId) {};
          this.original_bindEvents = renderer._bindEvents;
          renderer._bindEvents = function(control, dom, nodeId) {};
          renderer._bindData(this.control, this.id, this.node);
          document.body.appendChild(this.node);
          lang.event.emit(dom.find("input", this.node)[0], "change", {
            bubbles: true,
            cancelable: true,
            which: 1
          });
          return doh.assertEqual("Text", setCalled);
        },
        tearDown: function() {
          dom.destroy(this.node);
          this.control.watch = this.originalWatch;
          this.control.set = this.originalSet;
          renderer._bindEvents = this.original_bindEvents;
          return renderer._bindAttachPoints = this.original_bindAttachPoints;
        }
      }, {
        name: "_bindEvents_controlNodeNodeId_eventBoundAndAttachIdsSet",
        setUp: function() {
          var html;
          this.control = new TemplatedDummyClass();
          this.control.Id = "someid";
          html = "<div id=\"someid\" class=\"Text\" width: 100%; height: 100%\"> <input type=\"text\" value=\"sometext\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someid_input\" data-attach-event=\"change:somehandler\" /> <label for=\"someid_input\"> <span id=\"someid_LastUpdated\" data-bind-to=\"Text\">sometext</span> </label> </div>";
          this.node = dom.create(html);
          return this.subnode = dom.find("input", this.node)[0];
        },
        runTest: function(t) {
          var somehandlerCalled;
          somehandlerCalled = false;
          this.control.somehandler = function() {
            return somehandlerCalled = true;
          };
          renderer._bindEvents(this.control, this.node, "someid");
          lang.event.emit(this.subnode, "change");
          doh.assertTrue(this.control._attachIds["someid"]["someid_input"]);
          return doh.assertTrue(somehandlerCalled);
        },
        tearDown: function() {}
      }, {
        name: "_cleanDom_node_cleaned",
        setUp: function() {
          var html;
          this.control = new TemplatedDummyClass();
          this.control.Id = "someid";
          html = "<div id=\"someid\" class=\"Text\" width: 100%; height: 100%\"> <input type=\"text\" value=\"sometext\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-props=\"trim:true, propercase:true\" id=\"someid_input\" /> <label for=\"someid_input\"> <span id=\"someid_LastUpdated\" data-bind-to=\"Text\">sometext</span> </label> </div>";
          return this.node = dom.create(html);
        },
        runTest: function(t) {
          var findArray;
          renderer._cleanDom(this.node);
          findArray = dom.find('[data-dojo-type]', this.node);
          return doh.assertEqual(0, findArray.length);
        },
        tearDown: function() {}
      }, {
        name: "destroy_control_controlUiDestroyedAndUnregistered",
        setUp: function() {
          this.control = new TemplatedDummyClass();
          this.control.Id = "someid";
          return this.control._setterBindings = {
            _setterHandle: "_setterHandle",
            _domHandle: "_domHandle"
          };
        },
        runTest: function(t) {
          var domDestroyCalled, eventRemoveCalled, watchRemoveCalled, _removeWidgets, _unbindDataCalled, _unregisterNodeCalled;
          watchRemoveCalled = false;
          this.control._setterBindings._setterHandle = {
            remove: function() {
              return watchRemoveCalled = "watchRemoveCalled";
            }
          };
          eventRemoveCalled = false;
          this.originalEventRemove = lang.event.remove;
          lang.event.remove = function(handle) {
            return eventRemoveCalled = "eventRemoveCalled";
          };
          _unbindDataCalled = false;
          this.original_unbindData = renderer._unbindData;
          renderer._unbindData = function(control) {
            return _unbindDataCalled = "_unbindDataCalled";
          };
          _removeWidgets = false;
          this.original_removeWidgets = renderer._removeWidgets;
          renderer._removeWidgets = function(control) {
            return _removeWidgets = "_removeWidgets";
          };
          _unregisterNodeCalled = false;
          this.original_unregisterNode = renderer._unregisterNode;
          renderer._unregisterNode = function(control) {
            return _unregisterNodeCalled = "_unregisterNodeCalled";
          };
          domDestroyCalled = false;
          this.originalDomDestroy = dom.destroy;
          dom.destroy = function(Id) {
            return domDestroyCalled = "domDestroyCalled";
          };
          renderer.destroy(this.control);
          doh.assertEqual("watchRemoveCalled", watchRemoveCalled);
          doh.assertEqual("eventRemoveCalled", eventRemoveCalled);
          doh.assertEqual("_unbindDataCalled", _unbindDataCalled);
          doh.assertEqual("_removeWidgets", _removeWidgets);
          doh.assertEqual("_unregisterNodeCalled", _unregisterNodeCalled);
          return doh.assertEqual("domDestroyCalled", domDestroyCalled);
        },
        tearDown: function() {
          lang.event.remove = this.originalEventRemove;
          renderer._unbindData = this.original_unbindData;
          renderer._removeWidgets = this.original_removeWidgets;
          renderer._unregisterNode = this.original_unregisterNode;
          return dom.destroy = this.originalDomDestroy;
        }
      }
    ]);
  });

}).call(this);

//# sourceMappingURL=Mizuhiki.js.map
